IF(OF_PYTHON_MODULE)
  MESSAGE(STATUS "OpenFrames enabling Python interface") 

  # Handle SWIG policy warning
  cmake_policy(SET CMP0078 "OLD")
  cmake_policy(SET CMP0086 "NEW")

  FIND_PACKAGE(SWIG REQUIRED)
  INCLUDE(${SWIG_USE_FILE})

  FIND_PACKAGE(Python3 REQUIRED COMPONENTS Development)

  # Disable automatic linking of pythonXY_d.lib to use the release version of python.lib
  ADD_DEFINITIONS(-DSWIG_PYTHON_INTERPRETER_NO_DEBUG)
  # With Visual Studio we need to turn off iterator debugging because we are linking against the release version of pythonXY.lib
  IF(MSVC)
    ADD_DEFINITIONS(-D_ITERATOR_DEBUG_LEVEL=0)
  ENDIF()

  ADD_CUSTOM_TARGET(PyOFInterface SOURCES PyOFInterface.i configure_PyOFInterface.cmake.in)

  SET(SWIG_MODULE_NAME PyOFInterfaceC)
  CONFIGURE_FILE(configure_PyOFInterface.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/configure_PyOFInterfaceC.cmake @ONLY)
  # Work around for Visual Studio where swig header dependencies are not properly detected
  ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceC.i COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/configure_PyOFInterfaceC.cmake DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/PyOFInterface.i ${OpenFrames_SOURCE_DIR}/include/OpenFrames/OF_Interface.h)
  SET_PROPERTY(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceC.i PROPERTY CPLUSPLUS ON)
  SET_PROPERTY(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceC.i PROPERTY USE_TARGET_INCLUDE_DIRECTORIES ON)
  # On windows the _WIN64 is autodefined by the compiler cl.exe when using the Win64 toolchain
  IF(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
    SET_PROPERTY(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceC.i PROPERTY SWIG_FLAGS -D_WIN64 -DOF_EXPORT)
  ELSE()
    SET_PROPERTY(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceC.i PROPERTY SWIG_FLAGS -DOF_EXPORT)
  ENDIF()
  SOURCE_GROUP("Generated" FILES ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceC.i ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceC.py)

  # define Python bindings target
  SWIG_ADD_LIBRARY(PyOFInterfaceC LANGUAGE python SOURCES ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceC.i)
  SWIG_LINK_LIBRARIES(PyOFInterfaceC Python3::Module OpenFrames_Interface_C)
  SET_TARGET_PROPERTIES(${SWIG_MODULE_PyOFInterfaceC_REAL_NAME} PROPERTIES DEBUG_POSTFIX "")


  INCLUDE_DIRECTORIES(${OSG_INCLUDE_DIR})
  ADD_CUSTOM_TARGET(PyOF SOURCES PyOF.i configure_PyOF.cmake.in)

  SET(SWIG_MODULE_NAME PyOF)
  CONFIGURE_FILE(configure_PyOF.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/configure_PyOF.cmake @ONLY)
  # Work around for Visual Studio where swig header dependencies are not properly detected
  ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/PyOF.i COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/configure_PyOF.cmake DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/PyOF.i)
  SET_PROPERTY(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/PyOF.i PROPERTY CPLUSPLUS ON)
  SET_PROPERTY(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/PyOF.i PROPERTY USE_TARGET_INCLUDE_DIRECTORIES ON)
  # On windows the _WIN64 is autodefined by the compiler cl.exe when using the Win64 toolchain
  IF(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
    SET_PROPERTY(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/PyOF.i PROPERTY SWIG_FLAGS -D_WIN64 -DOF_EXPORT)
  ELSE()
    SET_PROPERTY(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/PyOF.i PROPERTY SWIG_FLAGS -DOF_EXPORT)
  ENDIF()
  SOURCE_GROUP("Generated" FILES ${CMAKE_CURRENT_BINARY_DIR}/PyOF.i ${CMAKE_CURRENT_BINARY_DIR}/PyOF.py)

  # define Python bindings target
  SWIG_ADD_LIBRARY(PyOF LANGUAGE python SOURCES ${CMAKE_CURRENT_BINARY_DIR}/PyOF.i)
  SWIG_LINK_LIBRARIES(PyOF Python3::Module OpenFrames ${OPENSCENEGRAPH_LIBRARIES})
  SET_TARGET_PROPERTIES(${SWIG_MODULE_PyOF_REAL_NAME} PROPERTIES DEBUG_POSTFIX "")

  IF( OF_FORTRAN_MODULE )
    SET(SWIG_MODULE_NAME PyOFInterfaceIFORT)
    CONFIGURE_FILE(configure_PyOFInterface.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/configure_PyOFInterfaceIFORT.cmake @ONLY)
    # Work around for Visual Studio where swig header dependencies are not properly detected
    ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceIFORT.i COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/configure_PyOFInterfaceIFORT.cmake DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/PyOFInterface.i ${OpenFrames_SOURCE_DIR}/include/OpenFrames/OF_Interface.h)
    SET_PROPERTY(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceIFORT.i PROPERTY CPLUSPLUS ON)
    SET_PROPERTY(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceIFORT.i USE_TARGET_INCLUDE_DIRECTORIES ON)
    # On windows the _WIN64 is autodefined by the compiler cl.exe when using the Win64 toolchain
    IF(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
      SET_PROPERTY(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceIFORT.i PROPERTY SWIG_FLAGS -D_WIN64 -DOF_EXPORT)
    ELSE()
      SET_PROPERTY(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceIFORT.i PROPERTY SWIG_FLAGS -DOF_EXPORT)
    ENDIF()
    SOURCE_GROUP("Generated" FILES ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceIFORT.i ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceIFORT.py)

    # define Python bindings target
    SWIG_ADD_LIBRARY(PyOFInterfaceIFORT LANGUAGE python SOURCES ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceIFORT.i)
    SWIG_LINK_LIBRARIES(PyOFInterfaceIFORT Python3::Module OpenFrames_Interface_IFORT)
    SET_TARGET_PROPERTIES(${SWIG_MODULE_PyOFInterfaceIFORT_REAL_NAME} PROPERTIES DEBUG_POSTFIX  "")
  ENDIF( OF_FORTRAN_MODULE )

  # Set RPATH to find shared libraries in default locations on Mac/Linux
  IF(UNIX)
    IF(APPLE)
      SET(MAC_RPATHS "@loader_path/;@loader_path/../../lib/")
      SET_TARGET_PROPERTIES(${SWIG_MODULE_PyOFInterfaceC_REAL_NAME} PROPERTIES INSTALL_RPATH
        "${MAC_RPATHS}"
      )
      SET_TARGET_PROPERTIES(${SWIG_MODULE_PyOF_REAL_NAME} PROPERTIES INSTALL_RPATH
        "${MAC_RPATHS}"
      )
      IF( OF_FORTRAN_MODULE )
        SET_TARGET_PROPERTIES(${SWIG_MODULE_PyOFInterfaceIFORT_REAL_NAME} PROPERTIES INSTALL_RPATH
          "${MAC_RPATHS}"
        )
      ENDIF( OF_FORTRAN_MODULE )
    ELSE()
      SET_TARGET_PROPERTIES(${SWIG_MODULE_PyOFInterfaceC_REAL_NAME} PROPERTIES INSTALL_RPATH
      "\$ORIGIN/"
      )
      SET_TARGET_PROPERTIES(${SWIG_MODULE_PyOF_REAL_NAME} PROPERTIES INSTALL_RPATH
      "\$ORIGIN/"
      )
      IF( OF_FORTRAN_MODULE )
        SET_TARGET_PROPERTIES(${SWIG_MODULE_PyOFInterfaceIFORT_REAL_NAME} PROPERTIES INSTALL_RPATH
        "\$ORIGIN/"
        )
      ENDIF( OF_FORTRAN_MODULE )
    ENDIF()
  ENDIF()

  # Install Swig modules
  INSTALL(TARGETS ${SWIG_MODULE_PyOFInterfaceC_REAL_NAME} LIBRARY DESTINATION ${OF_INTERFACE_DIR})
  INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceC.py DESTINATION ${OF_INTERFACE_DIR})
  INSTALL(TARGETS ${SWIG_MODULE_PyOF_REAL_NAME} LIBRARY DESTINATION ${OF_INTERFACE_DIR})
  INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/PyOF.py DESTINATION ${OF_INTERFACE_DIR})
  IF( OF_FORTRAN_MODULE )
    INSTALL(TARGETS ${SWIG_MODULE_PyOFInterfaceIFORT_REAL_NAME} LIBRARY DESTINATION ${OF_INTERFACE_DIR})
    INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/PyOFInterfaceIFORT.py DESTINATION ${OF_INTERFACE_DIR})
  ENDIF( OF_FORTRAN_MODULE )
ENDIF()
